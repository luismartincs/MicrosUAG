ARM GAS  /tmp/ccmMOdAk.s 			page 1


   1              		.arch armv6
   2              		.eabi_attribute 27, 3
   3              		.eabi_attribute 28, 1
   4              		.fpu vfp
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 2
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"frecuencymeter.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	HOLD
  19              		.bss
  22              	HOLD:
  23 0000 00       		.space	1
  24              		.global	task1
  25              		.data
  26              		.align	2
  29              	task1:
  30 0000 C4090000 		.word	2500
  31              		.global	t1s
  32              		.bss
  35              	t1s:
  36 0001 00       		.space	1
  37              		.global	task2
  38              		.data
  39              		.align	2
  42              	task2:
  43 0004 88130000 		.word	5000
  44              		.global	t2s
  45              		.bss
  48              	t2s:
  49 0002 00       		.space	1
  50              		.global	task3
  51              		.data
  52              		.align	2
  55              	task3:
  56 0008 E2040000 		.word	1250
  57              		.global	t3s
  58              		.bss
  61              	t3s:
  62 0003 00       		.space	1
  63              		.global	taskBtn
  64              		.data
  65              		.align	2
  68              	taskBtn:
  69 000c F4010000 		.word	500
  70              		.global	lbtns
  73              	lbtns:
  74 0010 01       		.byte	1
  75              		.global	lins
ARM GAS  /tmp/ccmMOdAk.s 			page 2


  76 0011 000000   		.align	2
  79              	lins:
  80 0014 01000000 		.word	1
  81              		.global	counter
  82              		.bss
  83              		.align	2
  86              	counter:
  87 0004 00000000 		.space	4
  88              		.global	display
  91              	display:
  92 0008 00       		.space	1
  93              		.global	segments
  94              		.data
  95              		.align	2
  98              	segments:
  99 0018 19       		.byte	25
 100 0019 18       		.byte	24
 101 001a 17       		.byte	23
 102 001b 16       		.byte	22
 103 001c 15       		.byte	21
 104 001d 1D       		.byte	29
 105 001e 1C       		.byte	28
 106 001f 00       		.byte	0
 107 0020 01       		.byte	1
 108 0021 00       		.byte	0
 109 0022 00       		.byte	0
 110 0023 00       		.byte	0
 111 0024 00       		.byte	0
 112 0025 00       		.byte	0
 113 0026 01       		.byte	1
 114 0027 01       		.byte	1
 115 0028 01       		.byte	1
 116 0029 00       		.byte	0
 117 002a 01       		.byte	1
 118 002b 00       		.byte	0
 119 002c 01       		.byte	1
 120 002d 01       		.byte	1
 121 002e 00       		.byte	0
 122 002f 00       		.byte	0
 123 0030 00       		.byte	0
 124 0031 00       		.byte	0
 125 0032 01       		.byte	1
 126 0033 00       		.byte	0
 127 0034 01       		.byte	1
 128 0035 00       		.byte	0
 129 0036 00       		.byte	0
 130 0037 00       		.byte	0
 131 0038 01       		.byte	1
 132 0039 00       		.byte	0
 133 003a 00       		.byte	0
 134 003b 00       		.byte	0
 135 003c 00       		.byte	0
 136 003d 01       		.byte	1
 137 003e 00       		.byte	0
 138 003f 01       		.byte	1
 139 0040 00       		.byte	0
 140 0041 01       		.byte	1
ARM GAS  /tmp/ccmMOdAk.s 			page 3


 141 0042 00       		.byte	0
 142 0043 00       		.byte	0
 143 0044 00       		.byte	0
 144 0045 01       		.byte	1
 145 0046 01       		.byte	1
 146 0047 00       		.byte	0
 147 0048 00       		.byte	0
 148 0049 00       		.byte	0
 149 004a 00       		.byte	0
 150 004b 00       		.byte	0
 151 004c 01       		.byte	1
 152 004d 00       		.byte	0
 153 004e 00       		.byte	0
 154 004f 00       		.byte	0
 155 0050 01       		.byte	1
 156 0051 01       		.byte	1
 157 0052 00       		.byte	0
 158 0053 00       		.byte	0
 159 0054 01       		.byte	1
 160 0055 00       		.byte	0
 161 0056 01       		.byte	1
 162 0057 00       		.byte	0
 163 0058 00       		.byte	0
 164 0059 00       		.byte	0
 165 005a 00       		.byte	0
 166 005b 00       		.byte	0
 167 005c 00       		.byte	0
 168 005d 00       		.byte	0
 169 005e 00       		.byte	0
 170 005f 00       		.byte	0
 171 0060 00       		.byte	0
 172 0061 00       		.byte	0
 173 0062 01       		.byte	1
 174 0063 00       		.byte	0
 175 0064 00       		.byte	0
 176 0065 01       		.byte	1
 177 0066 00       		.byte	0
 178 0067 01       		.byte	1
 179 0068 01       		.byte	1
 180 0069 01       		.byte	1
 181 006a 01       		.byte	1
 182 006b 01       		.byte	1
 183              		.global	displays
 184              		.align	2
 187              	displays:
 188 006c 08       		.byte	8
 189 006d 09       		.byte	9
 190 006e 07       		.byte	7
 191 006f 00       		.byte	0
 192              		.global	displaysValue
 193              		.bss
 194 0009 000000   		.align	2
 197              	displaysValue:
 198 000c 00000000 		.space	4
 199              		.text
 200              		.align	2
 201              		.global	cleanGPIO
ARM GAS  /tmp/ccmMOdAk.s 			page 4


 203              	cleanGPIO:
 204              	.LFB0:
 205              		.file 1 "frecuencymeter.c"
   1:frecuencymeter.c **** #include <stdio.h>
   2:frecuencymeter.c **** #include <wiringPi.h>
   3:frecuencymeter.c **** #include <time.h>
   4:frecuencymeter.c **** 
   5:frecuencymeter.c **** 
   6:frecuencymeter.c **** #define DISP4 0
   7:frecuencymeter.c **** #define DISP3 7
   8:frecuencymeter.c **** #define DISP2 9
   9:frecuencymeter.c **** #define DISP1 8
  10:frecuencymeter.c **** 
  11:frecuencymeter.c **** #define LED1 27
  12:frecuencymeter.c **** #define LED2 26
  13:frecuencymeter.c **** #define LED3 6
  14:frecuencymeter.c **** 
  15:frecuencymeter.c **** #define F 25 
  16:frecuencymeter.c **** #define G 24
  17:frecuencymeter.c **** #define A 23
  18:frecuencymeter.c **** #define B 22
  19:frecuencymeter.c **** #define E 21
  20:frecuencymeter.c **** #define C 29
  21:frecuencymeter.c **** #define D 28
  22:frecuencymeter.c **** 
  23:frecuencymeter.c **** #define SIGNAL 4
  24:frecuencymeter.c **** 
  25:frecuencymeter.c **** #define BUTTON 5
  26:frecuencymeter.c **** 
  27:frecuencymeter.c **** 
  28:frecuencymeter.c **** unsigned char HOLD = 0;
  29:frecuencymeter.c **** 
  30:frecuencymeter.c **** //TASK COUNTERS
  31:frecuencymeter.c **** 
  32:frecuencymeter.c **** int task1 = 2500;
  33:frecuencymeter.c **** unsigned char t1s = 0;
  34:frecuencymeter.c **** 
  35:frecuencymeter.c **** int task2 = 5000;
  36:frecuencymeter.c **** unsigned char t2s = 0;
  37:frecuencymeter.c **** 
  38:frecuencymeter.c **** int task3 = 1250;
  39:frecuencymeter.c **** unsigned char t3s = 0;
  40:frecuencymeter.c **** 
  41:frecuencymeter.c **** int taskBtn = 500;
  42:frecuencymeter.c **** unsigned char lbtns = 1;
  43:frecuencymeter.c **** 
  44:frecuencymeter.c **** int lins = 1;
  45:frecuencymeter.c **** int counter = 0;
  46:frecuencymeter.c **** 
  47:frecuencymeter.c **** unsigned char display = 0;
  48:frecuencymeter.c **** 
  49:frecuencymeter.c **** unsigned char segments[] = {
  50:frecuencymeter.c **** 			  F,G,A,B,E,C,D,
  51:frecuencymeter.c **** 			  0,1,0,0,0,0,0,
  52:frecuencymeter.c **** 	                  1,1,1,0,1,0,1,
  53:frecuencymeter.c **** 			  1,0,0,0,0,1,0,
  54:frecuencymeter.c **** 			  1,0,0,0,1,0,0,
ARM GAS  /tmp/ccmMOdAk.s 			page 5


  55:frecuencymeter.c **** 			  0,0,1,0,1,0,1,
  56:frecuencymeter.c **** 			  0,0,0,1,1,0,0,
  57:frecuencymeter.c **** 			  0,0,0,1,0,0,0,
  58:frecuencymeter.c **** 			  1,1,0,0,1,0,1,
  59:frecuencymeter.c **** 			  0,0,0,0,0,0,0,
  60:frecuencymeter.c **** 			  0,0,0,0,1,0,0,
  61:frecuencymeter.c **** 			  1,0,1,1,1,1,1,
  62:frecuencymeter.c ****                   };
  63:frecuencymeter.c **** 
  64:frecuencymeter.c **** unsigned char displays[] = {DISP1,DISP2,DISP3,DISP4};
  65:frecuencymeter.c **** unsigned char displaysValue[] = {0,0,0,0};
  66:frecuencymeter.c **** 
  67:frecuencymeter.c **** //gcc -Wall -o blink blink.c -lwiringPi
  68:frecuencymeter.c **** 
  69:frecuencymeter.c **** void cleanGPIO(){
 206              		.loc 1 69 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 1, uses_anonymous_args = 0
 210 0000 00482DE9 		stmfd	sp!, {fp, lr}
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 11, -8
 213              		.cfi_offset 14, -4
 214 0004 04B08DE2 		add	fp, sp, #4
 215              		.cfi_def_cfa 11, 4
  70:frecuencymeter.c **** 
  71:frecuencymeter.c ****   digitalWrite(DISP1,LOW);
 216              		.loc 1 71 0
 217 0008 0800A0E3 		mov	r0, #8
 218 000c 0010A0E3 		mov	r1, #0
 219 0010 FEFFFFEB 		bl	digitalWrite
  72:frecuencymeter.c ****   digitalWrite(DISP2,LOW);
 220              		.loc 1 72 0
 221 0014 0900A0E3 		mov	r0, #9
 222 0018 0010A0E3 		mov	r1, #0
 223 001c FEFFFFEB 		bl	digitalWrite
  73:frecuencymeter.c ****   digitalWrite(DISP3,LOW);
 224              		.loc 1 73 0
 225 0020 0700A0E3 		mov	r0, #7
 226 0024 0010A0E3 		mov	r1, #0
 227 0028 FEFFFFEB 		bl	digitalWrite
  74:frecuencymeter.c ****   digitalWrite(DISP4,LOW);
 228              		.loc 1 74 0
 229 002c 0000A0E3 		mov	r0, #0
 230 0030 0010A0E3 		mov	r1, #0
 231 0034 FEFFFFEB 		bl	digitalWrite
  75:frecuencymeter.c **** 
  76:frecuencymeter.c ****   digitalWrite(F,HIGH);
 232              		.loc 1 76 0
 233 0038 1900A0E3 		mov	r0, #25
 234 003c 0110A0E3 		mov	r1, #1
 235 0040 FEFFFFEB 		bl	digitalWrite
  77:frecuencymeter.c ****   digitalWrite(G,HIGH);
 236              		.loc 1 77 0
 237 0044 1800A0E3 		mov	r0, #24
 238 0048 0110A0E3 		mov	r1, #1
 239 004c FEFFFFEB 		bl	digitalWrite
ARM GAS  /tmp/ccmMOdAk.s 			page 6


  78:frecuencymeter.c ****   digitalWrite(A,HIGH);
 240              		.loc 1 78 0
 241 0050 1700A0E3 		mov	r0, #23
 242 0054 0110A0E3 		mov	r1, #1
 243 0058 FEFFFFEB 		bl	digitalWrite
  79:frecuencymeter.c ****   digitalWrite(B,HIGH);
 244              		.loc 1 79 0
 245 005c 1600A0E3 		mov	r0, #22
 246 0060 0110A0E3 		mov	r1, #1
 247 0064 FEFFFFEB 		bl	digitalWrite
  80:frecuencymeter.c ****   digitalWrite(E,HIGH); 
 248              		.loc 1 80 0
 249 0068 1500A0E3 		mov	r0, #21
 250 006c 0110A0E3 		mov	r1, #1
 251 0070 FEFFFFEB 		bl	digitalWrite
  81:frecuencymeter.c ****   digitalWrite(C,HIGH);
 252              		.loc 1 81 0
 253 0074 1D00A0E3 		mov	r0, #29
 254 0078 0110A0E3 		mov	r1, #1
 255 007c FEFFFFEB 		bl	digitalWrite
  82:frecuencymeter.c ****   digitalWrite(D,HIGH);  
 256              		.loc 1 82 0
 257 0080 1C00A0E3 		mov	r0, #28
 258 0084 0110A0E3 		mov	r1, #1
 259 0088 FEFFFFEB 		bl	digitalWrite
  83:frecuencymeter.c **** 
  84:frecuencymeter.c ****   digitalWrite(LED1,LOW);
 260              		.loc 1 84 0
 261 008c 1B00A0E3 		mov	r0, #27
 262 0090 0010A0E3 		mov	r1, #0
 263 0094 FEFFFFEB 		bl	digitalWrite
  85:frecuencymeter.c ****   digitalWrite(LED2,LOW);
 264              		.loc 1 85 0
 265 0098 1A00A0E3 		mov	r0, #26
 266 009c 0010A0E3 		mov	r1, #0
 267 00a0 FEFFFFEB 		bl	digitalWrite
  86:frecuencymeter.c ****   digitalWrite(LED3,LOW);
 268              		.loc 1 86 0
 269 00a4 0600A0E3 		mov	r0, #6
 270 00a8 0010A0E3 		mov	r1, #0
 271 00ac FEFFFFEB 		bl	digitalWrite
  87:frecuencymeter.c **** 
  88:frecuencymeter.c **** }
 272              		.loc 1 88 0
 273 00b0 0088BDE8 		ldmfd	sp!, {fp, pc}
 274              		.cfi_endproc
 275              	.LFE0:
 277              		.align	2
 278              		.global	setup
 280              	setup:
 281              	.LFB1:
  89:frecuencymeter.c **** 
  90:frecuencymeter.c **** void setup(){
 282              		.loc 1 90 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccmMOdAk.s 			page 7


 286 00b4 00482DE9 		stmfd	sp!, {fp, lr}
 287              		.cfi_def_cfa_offset 8
 288              		.cfi_offset 11, -8
 289              		.cfi_offset 14, -4
 290 00b8 04B08DE2 		add	fp, sp, #4
 291              		.cfi_def_cfa 11, 4
  91:frecuencymeter.c ****   wiringPiSetup();
 292              		.loc 1 91 0
 293 00bc FEFFFFEB 		bl	wiringPiSetup
  92:frecuencymeter.c **** 
  93:frecuencymeter.c ****   pinMode(DISP1,OUTPUT);
 294              		.loc 1 93 0
 295 00c0 0800A0E3 		mov	r0, #8
 296 00c4 0110A0E3 		mov	r1, #1
 297 00c8 FEFFFFEB 		bl	pinMode
  94:frecuencymeter.c ****   pinMode(DISP2,OUTPUT);
 298              		.loc 1 94 0
 299 00cc 0900A0E3 		mov	r0, #9
 300 00d0 0110A0E3 		mov	r1, #1
 301 00d4 FEFFFFEB 		bl	pinMode
  95:frecuencymeter.c ****   pinMode(DISP3,OUTPUT);
 302              		.loc 1 95 0
 303 00d8 0700A0E3 		mov	r0, #7
 304 00dc 0110A0E3 		mov	r1, #1
 305 00e0 FEFFFFEB 		bl	pinMode
  96:frecuencymeter.c ****   pinMode(DISP4,OUTPUT);
 306              		.loc 1 96 0
 307 00e4 0000A0E3 		mov	r0, #0
 308 00e8 0110A0E3 		mov	r1, #1
 309 00ec FEFFFFEB 		bl	pinMode
  97:frecuencymeter.c **** 
  98:frecuencymeter.c ****   pinMode(F,OUTPUT);
 310              		.loc 1 98 0
 311 00f0 1900A0E3 		mov	r0, #25
 312 00f4 0110A0E3 		mov	r1, #1
 313 00f8 FEFFFFEB 		bl	pinMode
  99:frecuencymeter.c ****   pinMode(G,OUTPUT);
 314              		.loc 1 99 0
 315 00fc 1800A0E3 		mov	r0, #24
 316 0100 0110A0E3 		mov	r1, #1
 317 0104 FEFFFFEB 		bl	pinMode
 100:frecuencymeter.c ****   pinMode(A,OUTPUT);
 318              		.loc 1 100 0
 319 0108 1700A0E3 		mov	r0, #23
 320 010c 0110A0E3 		mov	r1, #1
 321 0110 FEFFFFEB 		bl	pinMode
 101:frecuencymeter.c ****   pinMode(B,OUTPUT);
 322              		.loc 1 101 0
 323 0114 1600A0E3 		mov	r0, #22
 324 0118 0110A0E3 		mov	r1, #1
 325 011c FEFFFFEB 		bl	pinMode
 102:frecuencymeter.c ****   pinMode(E,OUTPUT); 
 326              		.loc 1 102 0
 327 0120 1500A0E3 		mov	r0, #21
 328 0124 0110A0E3 		mov	r1, #1
 329 0128 FEFFFFEB 		bl	pinMode
 103:frecuencymeter.c ****   pinMode(C,OUTPUT);
ARM GAS  /tmp/ccmMOdAk.s 			page 8


 330              		.loc 1 103 0
 331 012c 1D00A0E3 		mov	r0, #29
 332 0130 0110A0E3 		mov	r1, #1
 333 0134 FEFFFFEB 		bl	pinMode
 104:frecuencymeter.c ****   pinMode(D,OUTPUT);  
 334              		.loc 1 104 0
 335 0138 1C00A0E3 		mov	r0, #28
 336 013c 0110A0E3 		mov	r1, #1
 337 0140 FEFFFFEB 		bl	pinMode
 105:frecuencymeter.c **** 
 106:frecuencymeter.c ****   pinMode(LED1,OUTPUT);
 338              		.loc 1 106 0
 339 0144 1B00A0E3 		mov	r0, #27
 340 0148 0110A0E3 		mov	r1, #1
 341 014c FEFFFFEB 		bl	pinMode
 107:frecuencymeter.c ****   pinMode(LED2,OUTPUT);
 342              		.loc 1 107 0
 343 0150 1A00A0E3 		mov	r0, #26
 344 0154 0110A0E3 		mov	r1, #1
 345 0158 FEFFFFEB 		bl	pinMode
 108:frecuencymeter.c ****   pinMode(LED3,OUTPUT);
 346              		.loc 1 108 0
 347 015c 0600A0E3 		mov	r0, #6
 348 0160 0110A0E3 		mov	r1, #1
 349 0164 FEFFFFEB 		bl	pinMode
 109:frecuencymeter.c ****   pinMode(BUTTON,INPUT);
 350              		.loc 1 109 0
 351 0168 0500A0E3 		mov	r0, #5
 352 016c 0010A0E3 		mov	r1, #0
 353 0170 FEFFFFEB 		bl	pinMode
 110:frecuencymeter.c ****    
 111:frecuencymeter.c ****   cleanGPIO();
 354              		.loc 1 111 0
 355 0174 FEFFFFEB 		bl	cleanGPIO
 112:frecuencymeter.c **** }
 356              		.loc 1 112 0
 357 0178 0088BDE8 		ldmfd	sp!, {fp, pc}
 358              		.cfi_endproc
 359              	.LFE1:
 361              		.align	2
 362              		.global	showDigit
 364              	showDigit:
 365              	.LFB2:
 113:frecuencymeter.c **** 
 114:frecuencymeter.c **** void showDigit(unsigned char display,unsigned char number){
 366              		.loc 1 114 0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 16
 369              		@ frame_needed = 1, uses_anonymous_args = 0
 370 017c 00482DE9 		stmfd	sp!, {fp, lr}
 371              		.cfi_def_cfa_offset 8
 372              		.cfi_offset 11, -8
 373              		.cfi_offset 14, -4
 374 0180 04B08DE2 		add	fp, sp, #4
 375              		.cfi_def_cfa 11, 4
 376 0184 10D04DE2 		sub	sp, sp, #16
 377 0188 0030A0E1 		mov	r3, r0
ARM GAS  /tmp/ccmMOdAk.s 			page 9


 378 018c 0120A0E1 		mov	r2, r1
 379 0190 0D304BE5 		strb	r3, [fp, #-13]
 380 0194 0230A0E1 		mov	r3, r2
 381 0198 0E304BE5 		strb	r3, [fp, #-14]
 115:frecuencymeter.c ****  
 116:frecuencymeter.c ****  int i=0;
 382              		.loc 1 116 0
 383 019c 0030A0E3 		mov	r3, #0
 384 01a0 08300BE5 		str	r3, [fp, #-8]
 117:frecuencymeter.c ****  number = number+1;
 385              		.loc 1 117 0
 386 01a4 0E305BE5 		ldrb	r3, [fp, #-14]
 387 01a8 013083E2 		add	r3, r3, #1
 388 01ac 0E304BE5 		strb	r3, [fp, #-14]
 118:frecuencymeter.c **** 
 119:frecuencymeter.c ****  digitalWrite(DISP1,LOW);
 389              		.loc 1 119 0
 390 01b0 0800A0E3 		mov	r0, #8
 391 01b4 0010A0E3 		mov	r1, #0
 392 01b8 FEFFFFEB 		bl	digitalWrite
 120:frecuencymeter.c ****  digitalWrite(DISP2,LOW);
 393              		.loc 1 120 0
 394 01bc 0900A0E3 		mov	r0, #9
 395 01c0 0010A0E3 		mov	r1, #0
 396 01c4 FEFFFFEB 		bl	digitalWrite
 121:frecuencymeter.c ****  digitalWrite(DISP3,LOW);
 397              		.loc 1 121 0
 398 01c8 0700A0E3 		mov	r0, #7
 399 01cc 0010A0E3 		mov	r1, #0
 400 01d0 FEFFFFEB 		bl	digitalWrite
 122:frecuencymeter.c ****  digitalWrite(DISP4,LOW);
 401              		.loc 1 122 0
 402 01d4 0000A0E3 		mov	r0, #0
 403 01d8 0010A0E3 		mov	r1, #0
 404 01dc FEFFFFEB 		bl	digitalWrite
 123:frecuencymeter.c **** 
 124:frecuencymeter.c **** 
 125:frecuencymeter.c ****  digitalWrite(display,HIGH);
 405              		.loc 1 125 0
 406 01e0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 407 01e4 0300A0E1 		mov	r0, r3
 408 01e8 0110A0E3 		mov	r1, #1
 409 01ec FEFFFFEB 		bl	digitalWrite
 126:frecuencymeter.c **** 
 127:frecuencymeter.c ****  for(i=0; i < 7; i++){ 
 410              		.loc 1 127 0
 411 01f0 0030A0E3 		mov	r3, #0
 412 01f4 08300BE5 		str	r3, [fp, #-8]
 413 01f8 120000EA 		b	.L4
 414              	.L5:
 128:frecuencymeter.c ****     digitalWrite(segments[i],segments[(7*number)+i]);
 415              		.loc 1 128 0 discriminator 3
 416 01fc 58209FE5 		ldr	r2, .L6
 417 0200 08301BE5 		ldr	r3, [fp, #-8]
 418 0204 033082E0 		add	r3, r2, r3
 419 0208 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 420 020c 0310A0E1 		mov	r1, r3
ARM GAS  /tmp/ccmMOdAk.s 			page 10


 421 0210 0E205BE5 		ldrb	r2, [fp, #-14]	@ zero_extendqisi2
 422 0214 0230A0E1 		mov	r3, r2
 423 0218 8331A0E1 		mov	r3, r3, asl #3
 424 021c 032062E0 		rsb	r2, r2, r3
 425 0220 08301BE5 		ldr	r3, [fp, #-8]
 426 0224 033082E0 		add	r3, r2, r3
 427 0228 2C209FE5 		ldr	r2, .L6
 428 022c 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 429 0230 0100A0E1 		mov	r0, r1
 430 0234 0310A0E1 		mov	r1, r3
 431 0238 FEFFFFEB 		bl	digitalWrite
 127:frecuencymeter.c ****     digitalWrite(segments[i],segments[(7*number)+i]);
 432              		.loc 1 127 0 discriminator 3
 433 023c 08301BE5 		ldr	r3, [fp, #-8]
 434 0240 013083E2 		add	r3, r3, #1
 435 0244 08300BE5 		str	r3, [fp, #-8]
 436              	.L4:
 127:frecuencymeter.c ****     digitalWrite(segments[i],segments[(7*number)+i]);
 437              		.loc 1 127 0 is_stmt 0 discriminator 1
 438 0248 08301BE5 		ldr	r3, [fp, #-8]
 439 024c 060053E3 		cmp	r3, #6
 440 0250 E9FFFFDA 		ble	.L5
 129:frecuencymeter.c ****  }
 130:frecuencymeter.c **** 	
 131:frecuencymeter.c **** }
 441              		.loc 1 131 0 is_stmt 1
 442 0254 04D04BE2 		sub	sp, fp, #4
 443              		.cfi_def_cfa 13, 8
 444              		@ sp needed
 445 0258 0088BDE8 		ldmfd	sp!, {fp, pc}
 446              	.L7:
 447              		.align	2
 448              	.L6:
 449 025c 00000000 		.word	segments
 450              		.cfi_endproc
 451              	.LFE2:
 453              		.section	.rodata
 454              		.align	2
 455              	.LC0:
 456 0000 5469636B 		.ascii	"Ticks %ld\012\000"
 456      7320256C 
 456      640A00
 457 000b 00       		.text
 458              		.align	2
 459              		.global	main
 461              	main:
 462              	.LFB3:
 132:frecuencymeter.c **** 
 133:frecuencymeter.c **** 
 134:frecuencymeter.c **** int main (void){
 463              		.loc 1 134 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 24
 466              		@ frame_needed = 1, uses_anonymous_args = 0
 467 0260 00482DE9 		stmfd	sp!, {fp, lr}
 468              		.cfi_def_cfa_offset 8
 469              		.cfi_offset 11, -8
ARM GAS  /tmp/ccmMOdAk.s 			page 11


 470              		.cfi_offset 14, -4
 471 0264 04B08DE2 		add	fp, sp, #4
 472              		.cfi_def_cfa 11, 4
 473 0268 18D04DE2 		sub	sp, sp, #24
 135:frecuencymeter.c ****    
 136:frecuencymeter.c ****   int cbtns = 1;
 474              		.loc 1 136 0
 475 026c 0130A0E3 		mov	r3, #1
 476 0270 0C300BE5 		str	r3, [fp, #-12]
 137:frecuencymeter.c ****   int cins = 1;
 477              		.loc 1 137 0
 478 0274 0130A0E3 		mov	r3, #1
 479 0278 08300BE5 		str	r3, [fp, #-8]
 138:frecuencymeter.c **** 
 139:frecuencymeter.c ****   setup();
 480              		.loc 1 139 0
 481 027c FEFFFFEB 		bl	setup
 482              	.L21:
 483              	.LBB2:
 140:frecuencymeter.c **** 
 141:frecuencymeter.c ****   for(;;){
 142:frecuencymeter.c **** 
 143:frecuencymeter.c **** 	clock_t begin = clock();
 484              		.loc 1 143 0
 485 0280 FEFFFFEB 		bl	clock
 486 0284 10000BE5 		str	r0, [fp, #-16]
 144:frecuencymeter.c **** 
 145:frecuencymeter.c **** 	if(taskBtn == 0){
 487              		.loc 1 145 0
 488 0288 34349FE5 		ldr	r3, .L22
 489 028c 003093E5 		ldr	r3, [r3]
 490 0290 000053E3 		cmp	r3, #0
 491 0294 1B00001A 		bne	.L9
 146:frecuencymeter.c **** 		cbtns = digitalRead(BUTTON);
 492              		.loc 1 146 0
 493 0298 0500A0E3 		mov	r0, #5
 494 029c FEFFFFEB 		bl	digitalRead
 495 02a0 0C000BE5 		str	r0, [fp, #-12]
 147:frecuencymeter.c **** 		if(cbtns != lbtns){
 496              		.loc 1 147 0
 497 02a4 1C349FE5 		ldr	r3, .L22+4
 498 02a8 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 499 02ac 0320A0E1 		mov	r2, r3
 500 02b0 0C301BE5 		ldr	r3, [fp, #-12]
 501 02b4 030052E1 		cmp	r2, r3
 502 02b8 0B00000A 		beq	.L10
 148:frecuencymeter.c **** 			if(cbtns == 0){
 503              		.loc 1 148 0
 504 02bc 0C301BE5 		ldr	r3, [fp, #-12]
 505 02c0 000053E3 		cmp	r3, #0
 506 02c4 0800001A 		bne	.L10
 149:frecuencymeter.c **** 				HOLD = !HOLD;
 507              		.loc 1 149 0
 508 02c8 FC339FE5 		ldr	r3, .L22+8
 509 02cc 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 510 02d0 000053E3 		cmp	r3, #0
 511 02d4 0130A003 		moveq	r3, #1
ARM GAS  /tmp/ccmMOdAk.s 			page 12


 512 02d8 0030A013 		movne	r3, #0
 513 02dc 7330EFE6 		uxtb	r3, r3
 514 02e0 0320A0E1 		mov	r2, r3
 515 02e4 E0339FE5 		ldr	r3, .L22+8
 516 02e8 0020C3E5 		strb	r2, [r3]
 517              	.L10:
 150:frecuencymeter.c **** 			}
 151:frecuencymeter.c **** 		}
 152:frecuencymeter.c **** 		lbtns = cbtns;
 518              		.loc 1 152 0
 519 02ec 0C301BE5 		ldr	r3, [fp, #-12]
 520 02f0 7320EFE6 		uxtb	r2, r3
 521 02f4 CC339FE5 		ldr	r3, .L22+4
 522 02f8 0020C3E5 		strb	r2, [r3]
 153:frecuencymeter.c **** 		taskBtn = 500;
 523              		.loc 1 153 0
 524 02fc C0339FE5 		ldr	r3, .L22
 525 0300 7D2FA0E3 		mov	r2, #500
 526 0304 002083E5 		str	r2, [r3]
 527              	.L9:
 154:frecuencymeter.c **** 	}
 155:frecuencymeter.c **** 
 156:frecuencymeter.c **** 	if(task1 == 0){
 528              		.loc 1 156 0
 529 0308 C0339FE5 		ldr	r3, .L22+12
 530 030c 003093E5 		ldr	r3, [r3]
 531 0310 000053E3 		cmp	r3, #0
 532 0314 1800001A 		bne	.L11
 157:frecuencymeter.c **** 		if(HOLD){		
 533              		.loc 1 157 0
 534 0318 AC339FE5 		ldr	r3, .L22+8
 535 031c 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 536 0320 000053E3 		cmp	r3, #0
 537 0324 0E00000A 		beq	.L12
 158:frecuencymeter.c **** 		  t1s = !t1s;
 538              		.loc 1 158 0
 539 0328 A4339FE5 		ldr	r3, .L22+16
 540 032c 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 541 0330 000053E3 		cmp	r3, #0
 542 0334 0130A003 		moveq	r3, #1
 543 0338 0030A013 		movne	r3, #0
 544 033c 7330EFE6 		uxtb	r3, r3
 545 0340 0320A0E1 		mov	r2, r3
 546 0344 88339FE5 		ldr	r3, .L22+16
 547 0348 0020C3E5 		strb	r2, [r3]
 159:frecuencymeter.c **** 		  digitalWrite(LED1,t1s);		
 548              		.loc 1 159 0
 549 034c 80339FE5 		ldr	r3, .L22+16
 550 0350 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 551 0354 1B00A0E3 		mov	r0, #27
 552 0358 0310A0E1 		mov	r1, r3
 553 035c FEFFFFEB 		bl	digitalWrite
 554 0360 020000EA 		b	.L13
 555              	.L12:
 160:frecuencymeter.c **** 		}else{
 161:frecuencymeter.c **** 		  digitalWrite(LED1,LOW);
 556              		.loc 1 161 0
ARM GAS  /tmp/ccmMOdAk.s 			page 13


 557 0364 1B00A0E3 		mov	r0, #27
 558 0368 0010A0E3 		mov	r1, #0
 559 036c FEFFFFEB 		bl	digitalWrite
 560              	.L13:
 162:frecuencymeter.c **** 		}
 163:frecuencymeter.c **** 		task1 = 2500;
 561              		.loc 1 163 0
 562 0370 58339FE5 		ldr	r3, .L22+12
 563 0374 5C239FE5 		ldr	r2, .L22+20
 564 0378 002083E5 		str	r2, [r3]
 565              	.L11:
 164:frecuencymeter.c **** 	}
 165:frecuencymeter.c **** 
 166:frecuencymeter.c **** 
 167:frecuencymeter.c **** 	if(task2 == 0){
 566              		.loc 1 167 0
 567 037c 58339FE5 		ldr	r3, .L22+24
 568 0380 003093E5 		ldr	r3, [r3]
 569 0384 000053E3 		cmp	r3, #0
 570 0388 1000001A 		bne	.L14
 168:frecuencymeter.c **** 		t2s = !t2s;
 571              		.loc 1 168 0
 572 038c 4C339FE5 		ldr	r3, .L22+28
 573 0390 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 574 0394 000053E3 		cmp	r3, #0
 575 0398 0130A003 		moveq	r3, #1
 576 039c 0030A013 		movne	r3, #0
 577 03a0 7330EFE6 		uxtb	r3, r3
 578 03a4 0320A0E1 		mov	r2, r3
 579 03a8 30339FE5 		ldr	r3, .L22+28
 580 03ac 0020C3E5 		strb	r2, [r3]
 169:frecuencymeter.c **** 		digitalWrite(LED2,t2s);
 581              		.loc 1 169 0
 582 03b0 28339FE5 		ldr	r3, .L22+28
 583 03b4 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 584 03b8 1A00A0E3 		mov	r0, #26
 585 03bc 0310A0E1 		mov	r1, r3
 586 03c0 FEFFFFEB 		bl	digitalWrite
 170:frecuencymeter.c **** 		task2 = 5000;
 587              		.loc 1 170 0
 588 03c4 10339FE5 		ldr	r3, .L22+24
 589 03c8 14239FE5 		ldr	r2, .L22+32
 590 03cc 002083E5 		str	r2, [r3]
 591              	.L14:
 171:frecuencymeter.c **** 	}
 172:frecuencymeter.c **** 
 173:frecuencymeter.c **** 	if(task3 == 0){
 592              		.loc 1 173 0
 593 03d0 10339FE5 		ldr	r3, .L22+36
 594 03d4 003093E5 		ldr	r3, [r3]
 595 03d8 000053E3 		cmp	r3, #0
 596 03dc 1800001A 		bne	.L15
 174:frecuencymeter.c **** 		if(!HOLD){
 597              		.loc 1 174 0
 598 03e0 E4329FE5 		ldr	r3, .L22+8
 599 03e4 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 600 03e8 000053E3 		cmp	r3, #0
ARM GAS  /tmp/ccmMOdAk.s 			page 14


 601 03ec 0E00001A 		bne	.L16
 175:frecuencymeter.c **** 		   t3s = !t3s;
 602              		.loc 1 175 0
 603 03f0 F4329FE5 		ldr	r3, .L22+40
 604 03f4 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 605 03f8 000053E3 		cmp	r3, #0
 606 03fc 0130A003 		moveq	r3, #1
 607 0400 0030A013 		movne	r3, #0
 608 0404 7330EFE6 		uxtb	r3, r3
 609 0408 0320A0E1 		mov	r2, r3
 610 040c D8329FE5 		ldr	r3, .L22+40
 611 0410 0020C3E5 		strb	r2, [r3]
 176:frecuencymeter.c **** 		   digitalWrite(LED3,t3s);
 612              		.loc 1 176 0
 613 0414 D0329FE5 		ldr	r3, .L22+40
 614 0418 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 615 041c 0600A0E3 		mov	r0, #6
 616 0420 0310A0E1 		mov	r1, r3
 617 0424 FEFFFFEB 		bl	digitalWrite
 618 0428 020000EA 		b	.L17
 619              	.L16:
 177:frecuencymeter.c **** 		}else{
 178:frecuencymeter.c **** 		   digitalWrite(LED3,LOW);
 620              		.loc 1 178 0
 621 042c 0600A0E3 		mov	r0, #6
 622 0430 0010A0E3 		mov	r1, #0
 623 0434 FEFFFFEB 		bl	digitalWrite
 624              	.L17:
 179:frecuencymeter.c **** 		}
 180:frecuencymeter.c **** 		task3 = 1250;
 625              		.loc 1 180 0
 626 0438 A8329FE5 		ldr	r3, .L22+36
 627 043c AC229FE5 		ldr	r2, .L22+44
 628 0440 002083E5 		str	r2, [r3]
 629              	.L15:
 181:frecuencymeter.c **** 	}
 182:frecuencymeter.c **** 
 183:frecuencymeter.c ****  	if(!HOLD){
 630              		.loc 1 183 0
 631 0444 80329FE5 		ldr	r3, .L22+8
 632 0448 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 633 044c 000053E3 		cmp	r3, #0
 634 0450 5F00001A 		bne	.L18
 184:frecuencymeter.c **** 		cins = digitalRead(SIGNAL);
 635              		.loc 1 184 0
 636 0454 0400A0E3 		mov	r0, #4
 637 0458 FEFFFFEB 		bl	digitalRead
 638 045c 08000BE5 		str	r0, [fp, #-8]
 185:frecuencymeter.c **** 		
 186:frecuencymeter.c **** 		if(cins != lins){
 639              		.loc 1 186 0
 640 0460 8C329FE5 		ldr	r3, .L22+48
 641 0464 003093E5 		ldr	r3, [r3]
 642 0468 08201BE5 		ldr	r2, [fp, #-8]
 643 046c 030052E1 		cmp	r2, r3
 644 0470 5700000A 		beq	.L18
 187:frecuencymeter.c **** 			counter++;
ARM GAS  /tmp/ccmMOdAk.s 			page 15


 645              		.loc 1 187 0
 646 0474 7C329FE5 		ldr	r3, .L22+52
 647 0478 003093E5 		ldr	r3, [r3]
 648 047c 013083E2 		add	r3, r3, #1
 649 0480 70229FE5 		ldr	r2, .L22+52
 650 0484 003082E5 		str	r3, [r2]
 188:frecuencymeter.c **** 			if(counter <= 9999){
 651              		.loc 1 188 0
 652 0488 68329FE5 		ldr	r3, .L22+52
 653 048c 003093E5 		ldr	r3, [r3]
 654 0490 64229FE5 		ldr	r2, .L22+56
 655 0494 020053E1 		cmp	r3, r2
 656 0498 410000CA 		bgt	.L19
 657              	.LBB3:
 189:frecuencymeter.c **** 	
 190:frecuencymeter.c **** 				displaysValue[3] = counter/1000;
 658              		.loc 1 190 0
 659 049c 54329FE5 		ldr	r3, .L22+52
 660 04a0 003093E5 		ldr	r3, [r3]
 661 04a4 54229FE5 		ldr	r2, .L22+60
 662 04a8 9213C2E0 		smull	r1, r2, r2, r3
 663 04ac 4223A0E1 		mov	r2, r2, asr #6
 664 04b0 C33FA0E1 		mov	r3, r3, asr #31
 665 04b4 023063E0 		rsb	r3, r3, r2
 666 04b8 7320EFE6 		uxtb	r2, r3
 667 04bc 40329FE5 		ldr	r3, .L22+64
 668 04c0 0320C3E5 		strb	r2, [r3, #3]
 191:frecuencymeter.c **** 				int h = counter%1000;
 669              		.loc 1 191 0
 670 04c4 2C329FE5 		ldr	r3, .L22+52
 671 04c8 003093E5 		ldr	r3, [r3]
 672 04cc 2C229FE5 		ldr	r2, .L22+60
 673 04d0 9213C2E0 		smull	r1, r2, r2, r3
 674 04d4 4213A0E1 		mov	r1, r2, asr #6
 675 04d8 C32FA0E1 		mov	r2, r3, asr #31
 676 04dc 012062E0 		rsb	r2, r2, r1
 677 04e0 FA1FA0E3 		mov	r1, #1000
 678 04e4 910202E0 		mul	r2, r1, r2
 679 04e8 033062E0 		rsb	r3, r2, r3
 680 04ec 14300BE5 		str	r3, [fp, #-20]
 192:frecuencymeter.c **** 				displaysValue[2] = h/100;
 681              		.loc 1 192 0
 682 04f0 14301BE5 		ldr	r3, [fp, #-20]
 683 04f4 0C229FE5 		ldr	r2, .L22+68
 684 04f8 9213C2E0 		smull	r1, r2, r2, r3
 685 04fc C222A0E1 		mov	r2, r2, asr #5
 686 0500 C33FA0E1 		mov	r3, r3, asr #31
 687 0504 023063E0 		rsb	r3, r3, r2
 688 0508 7320EFE6 		uxtb	r2, r3
 689 050c F0319FE5 		ldr	r3, .L22+64
 690 0510 0220C3E5 		strb	r2, [r3, #2]
 193:frecuencymeter.c **** 				h = h % 100;
 691              		.loc 1 193 0
 692 0514 14301BE5 		ldr	r3, [fp, #-20]
 693 0518 E8219FE5 		ldr	r2, .L22+68
 694 051c 9213C2E0 		smull	r1, r2, r2, r3
 695 0520 C212A0E1 		mov	r1, r2, asr #5
ARM GAS  /tmp/ccmMOdAk.s 			page 16


 696 0524 C32FA0E1 		mov	r2, r3, asr #31
 697 0528 012062E0 		rsb	r2, r2, r1
 698 052c 6410A0E3 		mov	r1, #100
 699 0530 910202E0 		mul	r2, r1, r2
 700 0534 033062E0 		rsb	r3, r2, r3
 701 0538 14300BE5 		str	r3, [fp, #-20]
 194:frecuencymeter.c **** 				displaysValue[1] = h/10;
 702              		.loc 1 194 0
 703 053c 14301BE5 		ldr	r3, [fp, #-20]
 704 0540 C4219FE5 		ldr	r2, .L22+72
 705 0544 9213C2E0 		smull	r1, r2, r2, r3
 706 0548 4221A0E1 		mov	r2, r2, asr #2
 707 054c C33FA0E1 		mov	r3, r3, asr #31
 708 0550 023063E0 		rsb	r3, r3, r2
 709 0554 7320EFE6 		uxtb	r2, r3
 710 0558 A4319FE5 		ldr	r3, .L22+64
 711 055c 0120C3E5 		strb	r2, [r3, #1]
 195:frecuencymeter.c **** 				h = h % 10;
 712              		.loc 1 195 0
 713 0560 14201BE5 		ldr	r2, [fp, #-20]
 714 0564 A0319FE5 		ldr	r3, .L22+72
 715 0568 9312C3E0 		smull	r1, r3, r3, r2
 716 056c 4311A0E1 		mov	r1, r3, asr #2
 717 0570 C23FA0E1 		mov	r3, r2, asr #31
 718 0574 011063E0 		rsb	r1, r3, r1
 719 0578 0130A0E1 		mov	r3, r1
 720 057c 0331A0E1 		mov	r3, r3, asl #2
 721 0580 013083E0 		add	r3, r3, r1
 722 0584 8330A0E1 		mov	r3, r3, asl #1
 723 0588 023063E0 		rsb	r3, r3, r2
 724 058c 14300BE5 		str	r3, [fp, #-20]
 196:frecuencymeter.c **** 				displaysValue[0] = h;	
 725              		.loc 1 196 0
 726 0590 14301BE5 		ldr	r3, [fp, #-20]
 727 0594 7320EFE6 		uxtb	r2, r3
 728 0598 64319FE5 		ldr	r3, .L22+64
 729 059c 0020C3E5 		strb	r2, [r3]
 730              	.LBE3:
 731 05a0 0B0000EA 		b	.L18
 732              	.L19:
 197:frecuencymeter.c **** 			
 198:frecuencymeter.c **** 			}else{
 199:frecuencymeter.c **** 				displaysValue[3] = 1;
 733              		.loc 1 199 0
 734 05a4 58319FE5 		ldr	r3, .L22+64
 735 05a8 0120A0E3 		mov	r2, #1
 736 05ac 0320C3E5 		strb	r2, [r3, #3]
 200:frecuencymeter.c **** 				displaysValue[2] = 10;
 737              		.loc 1 200 0
 738 05b0 4C319FE5 		ldr	r3, .L22+64
 739 05b4 0A20A0E3 		mov	r2, #10
 740 05b8 0220C3E5 		strb	r2, [r3, #2]
 201:frecuencymeter.c **** 				displaysValue[1] = 10;
 741              		.loc 1 201 0
 742 05bc 40319FE5 		ldr	r3, .L22+64
 743 05c0 0A20A0E3 		mov	r2, #10
 744 05c4 0120C3E5 		strb	r2, [r3, #1]
ARM GAS  /tmp/ccmMOdAk.s 			page 17


 202:frecuencymeter.c **** 				displaysValue[0] = 10;
 745              		.loc 1 202 0
 746 05c8 34319FE5 		ldr	r3, .L22+64
 747 05cc 0A20A0E3 		mov	r2, #10
 748 05d0 0020C3E5 		strb	r2, [r3]
 749              	.L18:
 203:frecuencymeter.c **** 			}
 204:frecuencymeter.c **** 		}
 205:frecuencymeter.c **** 
 206:frecuencymeter.c **** 	}
 207:frecuencymeter.c **** 
 208:frecuencymeter.c **** 	if(display == 4){
 750              		.loc 1 208 0
 751 05d4 34319FE5 		ldr	r3, .L22+76
 752 05d8 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 753 05dc 040053E3 		cmp	r3, #4
 754 05e0 0200001A 		bne	.L20
 209:frecuencymeter.c **** 		display = 0;
 755              		.loc 1 209 0
 756 05e4 24319FE5 		ldr	r3, .L22+76
 757 05e8 0020A0E3 		mov	r2, #0
 758 05ec 0020C3E5 		strb	r2, [r3]
 759              	.L20:
 210:frecuencymeter.c **** 	}
 211:frecuencymeter.c **** 
 212:frecuencymeter.c **** 	showDigit(displays[display],displaysValue[display]);
 760              		.loc 1 212 0
 761 05f0 18319FE5 		ldr	r3, .L22+76
 762 05f4 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 763 05f8 0320A0E1 		mov	r2, r3
 764 05fc 10319FE5 		ldr	r3, .L22+80
 765 0600 0220D3E7 		ldrb	r2, [r3, r2]	@ zero_extendqisi2
 766 0604 04319FE5 		ldr	r3, .L22+76
 767 0608 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 768 060c 0310A0E1 		mov	r1, r3
 769 0610 EC309FE5 		ldr	r3, .L22+64
 770 0614 0130D3E7 		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 771 0618 0200A0E1 		mov	r0, r2
 772 061c 0310A0E1 		mov	r1, r3
 773 0620 FEFFFFEB 		bl	showDigit
 213:frecuencymeter.c **** 	
 214:frecuencymeter.c **** 	clock_t end = clock();
 774              		.loc 1 214 0
 775 0624 FEFFFFEB 		bl	clock
 776 0628 18000BE5 		str	r0, [fp, #-24]
 215:frecuencymeter.c **** 
 216:frecuencymeter.c **** 		
 217:frecuencymeter.c **** 	
 218:frecuencymeter.c ****     lins = cins;
 777              		.loc 1 218 0
 778 062c C0209FE5 		ldr	r2, .L22+48
 779 0630 08301BE5 		ldr	r3, [fp, #-8]
 780 0634 003082E5 		str	r3, [r2]
 219:frecuencymeter.c ****     task1--;
 781              		.loc 1 219 0
 782 0638 90309FE5 		ldr	r3, .L22+12
 783 063c 003093E5 		ldr	r3, [r3]
ARM GAS  /tmp/ccmMOdAk.s 			page 18


 784 0640 013043E2 		sub	r3, r3, #1
 785 0644 84209FE5 		ldr	r2, .L22+12
 786 0648 003082E5 		str	r3, [r2]
 220:frecuencymeter.c ****     task2--;
 787              		.loc 1 220 0
 788 064c 88309FE5 		ldr	r3, .L22+24
 789 0650 003093E5 		ldr	r3, [r3]
 790 0654 013043E2 		sub	r3, r3, #1
 791 0658 7C209FE5 		ldr	r2, .L22+24
 792 065c 003082E5 		str	r3, [r2]
 221:frecuencymeter.c ****     task3--;
 793              		.loc 1 221 0
 794 0660 80309FE5 		ldr	r3, .L22+36
 795 0664 003093E5 		ldr	r3, [r3]
 796 0668 013043E2 		sub	r3, r3, #1
 797 066c 74209FE5 		ldr	r2, .L22+36
 798 0670 003082E5 		str	r3, [r2]
 222:frecuencymeter.c **** 
 223:frecuencymeter.c ****     taskBtn--;
 799              		.loc 1 223 0
 800 0674 48309FE5 		ldr	r3, .L22
 801 0678 003093E5 		ldr	r3, [r3]
 802 067c 013043E2 		sub	r3, r3, #1
 803 0680 3C209FE5 		ldr	r2, .L22
 804 0684 003082E5 		str	r3, [r2]
 224:frecuencymeter.c ****     display ++;
 805              		.loc 1 224 0
 806 0688 80309FE5 		ldr	r3, .L22+76
 807 068c 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 808 0690 013083E2 		add	r3, r3, #1
 809 0694 7320EFE6 		uxtb	r2, r3
 810 0698 70309FE5 		ldr	r3, .L22+76
 811 069c 0020C3E5 		strb	r2, [r3]
 225:frecuencymeter.c ****     printf("Ticks %ld\n",end - begin);
 812              		.loc 1 225 0
 813 06a0 18201BE5 		ldr	r2, [fp, #-24]
 814 06a4 10301BE5 		ldr	r3, [fp, #-16]
 815 06a8 023063E0 		rsb	r3, r3, r2
 816 06ac 64009FE5 		ldr	r0, .L22+84
 817 06b0 0310A0E1 		mov	r1, r3
 818 06b4 FEFFFFEB 		bl	printf
 226:frecuencymeter.c **** 
 227:frecuencymeter.c ****     delayMicroseconds(100);
 819              		.loc 1 227 0
 820 06b8 6400A0E3 		mov	r0, #100
 821 06bc FEFFFFEB 		bl	delayMicroseconds
 822              	.LBE2:
 228:frecuencymeter.c ****   }
 823              		.loc 1 228 0
 824 06c0 EEFEFFEA 		b	.L21
 825              	.L23:
 826              		.align	2
 827              	.L22:
 828 06c4 00000000 		.word	taskBtn
 829 06c8 00000000 		.word	lbtns
 830 06cc 00000000 		.word	HOLD
 831 06d0 00000000 		.word	task1
ARM GAS  /tmp/ccmMOdAk.s 			page 19


 832 06d4 00000000 		.word	t1s
 833 06d8 C4090000 		.word	2500
 834 06dc 00000000 		.word	task2
 835 06e0 00000000 		.word	t2s
 836 06e4 88130000 		.word	5000
 837 06e8 00000000 		.word	task3
 838 06ec 00000000 		.word	t3s
 839 06f0 E2040000 		.word	1250
 840 06f4 00000000 		.word	lins
 841 06f8 00000000 		.word	counter
 842 06fc 0F270000 		.word	9999
 843 0700 D34D6210 		.word	274877907
 844 0704 00000000 		.word	displaysValue
 845 0708 1F85EB51 		.word	1374389535
 846 070c 67666666 		.word	1717986919
 847 0710 00000000 		.word	display
 848 0714 00000000 		.word	displays
 849 0718 00000000 		.word	.LC0
 850              		.cfi_endproc
 851              	.LFE3:
 853              	.Letext0:
 854              		.file 2 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 855              		.file 3 "/usr/include/time.h"
ARM GAS  /tmp/ccmMOdAk.s 			page 20


DEFINED SYMBOLS
                            *ABS*:00000000 frecuencymeter.c
     /tmp/ccmMOdAk.s:22     .bss:00000000 HOLD
     /tmp/ccmMOdAk.s:23     .bss:00000000 $d
     /tmp/ccmMOdAk.s:29     .data:00000000 task1
     /tmp/ccmMOdAk.s:26     .data:00000000 $d
     /tmp/ccmMOdAk.s:35     .bss:00000001 t1s
     /tmp/ccmMOdAk.s:42     .data:00000004 task2
     /tmp/ccmMOdAk.s:48     .bss:00000002 t2s
     /tmp/ccmMOdAk.s:55     .data:00000008 task3
     /tmp/ccmMOdAk.s:61     .bss:00000003 t3s
     /tmp/ccmMOdAk.s:68     .data:0000000c taskBtn
     /tmp/ccmMOdAk.s:73     .data:00000010 lbtns
     /tmp/ccmMOdAk.s:79     .data:00000014 lins
     /tmp/ccmMOdAk.s:86     .bss:00000004 counter
     /tmp/ccmMOdAk.s:91     .bss:00000008 display
     /tmp/ccmMOdAk.s:98     .data:00000018 segments
     /tmp/ccmMOdAk.s:187    .data:0000006c displays
     /tmp/ccmMOdAk.s:197    .bss:0000000c displaysValue
     /tmp/ccmMOdAk.s:200    .text:00000000 $a
     /tmp/ccmMOdAk.s:203    .text:00000000 cleanGPIO
     /tmp/ccmMOdAk.s:280    .text:000000b4 setup
     /tmp/ccmMOdAk.s:364    .text:0000017c showDigit
     /tmp/ccmMOdAk.s:449    .text:0000025c $d
     /tmp/ccmMOdAk.s:454    .rodata:00000000 $d
     /tmp/ccmMOdAk.s:458    .text:00000260 $a
     /tmp/ccmMOdAk.s:461    .text:00000260 main
     /tmp/ccmMOdAk.s:828    .text:000006c4 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
digitalWrite
wiringPiSetup
pinMode
clock
digitalRead
printf
delayMicroseconds
